import java.rmi.AlreadyBoundException;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;

public class Process extends UnicastRemoteObject implements ProcessInterface{
	/**
	 * 
	 */
	private static final long serialVersionUID = -6044439435459038975L;
	private int processId;
    private String[] remotes;
    private Clock clock;
    private Registry registry;
    public Process(int processId, int port, String[] remotes) throws RemoteException, AlreadyBoundException{
        this.processId = processId;
        this.remotes = remotes;
        this.clock = new Clock(remotes.length);
        this.registry = LocateRegistry.getRegistry(port);
        this.registry.bind(Integer.toString(processId),  this);
    }

    public int getProcessId(){
        return processId;
    }

    public Clock getClock(){
        return clock;
    }

    public void deliverMessage(Message message, String receiver ){}

    public void broadcastMessage(Message message){
    	System.out.println(message.toStringBroadcast());
    	for(String each:remotes){
    		deliverMessage(message,each);
    	}
    }
    
    public void receiveMessage(Message message){
    	if(message.getClock().sendCondition(this.clock)){
    		System.out.println(message.toStringReceive());
    		this.clock.update(message.getClock());
    	}
    	else{
    		
    	}
    }

	@Override
	public void deliverMessage(Message message) throws Exception {
		// TODO Auto-generated method stub
		
	}
    
//    public void registerNode(){}



}
