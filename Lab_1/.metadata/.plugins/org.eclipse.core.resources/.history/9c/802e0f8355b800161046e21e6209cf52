import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.nio.file.StandardOpenOption;
import java.rmi.AccessException;
import java.rmi.AlreadyBoundException;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;
import java.util.ArrayList;
import java.util.Random;

public class NodeTest extends UnicastRemoteObject implements INode {
	/**
	 * 
	 */
	private static final long serialVersionUID = -7094234453673996454L;
	
	private int nodePort;
	private int networkSize;
	private Registry registry;
	int nodesJoined;
	public VectorClock clock;
	int index;
	ArrayList<Message> buffer = new ArrayList<Message>();
	int messageNumber;

	protected NodeTest(int registryPort, int nodePort, int networkSize) throws RemoteException {
		super();
		this.nodePort = nodePort;
		this.networkSize = networkSize;
		this.registry = LocateRegistry.getRegistry(registryPort);
		clock = new VectorClock(networkSize);
		try {
			this.registry.bind(Integer.toString(this.nodePort),this);
		} catch (AlreadyBoundException e) {
			System.out.println("Already bound" + e);
		}
		index = this.registry.list().length-1;
		messageNumber = 0;
	}
	
	public void notifyOthers(){
		String[] nodes;
		try {
			nodes = this.registry.list();
			for(String nodeName: nodes){
				INode remoteNode = getRemoteNode(nodeName);
				remoteNode.registerNode();
				System.out.println("Notified node: " + nodeName);
				nodesJoined++;		
			}
		} catch (Exception e) {
			System.out.println("Exception in notifyOthers" + e);
		}
	}
	
	public void algorithm(){
		final NodeTest currentNode = this;
		final double start = System.currentTimeMillis(); 
		new Thread(new Runnable(){
			public void run(){
				try{
					String[] remoteIds = currentNode.registry.list();
					while(true & (System.currentTimeMillis() - start) < 3000){
						currentNode.getVectorClock().increment(index);
						VectorClock currentClock = currentNode.getVectorClock();
						messageNumber++;
						
						String nodePortS = Integer.toString(currentNode.nodePort);
						String message = messageNumber + ". Hello ";
						Message m = new Message(nodePortS, message, currentClock);
						currentNode.broadcastMessage(m);	
						for(String nodeId: remoteIds){
							
							INode remoteNode = currentNode.getRemoteNode(nodeId);
							if(!nodePortS.equals(nodeId)){
								Message m2 = new Message(nodePortS, nodeId, message, currentClock);
								Thread.sleep(randomNumber(5,350));
								//Thread.sleep(100);
								remoteNode.receiveMessage(m2);
							}	
						}
						Thread.sleep(randomNumber(5,50));
					}
					
				}catch (Exception e) {
					System.out.println("Exception in broadCast " + e);
				}
			}
			
		}).start();
		
	}
	
	public int randomNumber(int low, int high){
		Random r = new Random();
		return r.nextInt(high-low) + low;
	}

	public void broadcastMessage(Message m) throws RemoteException {		
		String s = m.toStringBroadcast();
		writeFile(s);
		System.out.println(s);
	}
	
	public void receiveMessage(Message m) throws RemoteException {		
		
		if(!m.getVectorClock().passCondition(this.getVectorClock())){
			System.out.println(m.toStringReceive() +", own: " + clock + " buffer");
			synchronized(this) {
				
				for(int i = 0;i < buffer.size(); i++){
					Message messageB = buffer.get(i);
					System.out.println(messageB.getVectorClock() + "passconditon" + this.getVectorClock());
					if(messageB.getVectorClock().passCondition(this.getVectorClock())){
						System.out.println(messageB.toStringReceive() +", own: " + clock + " retry");
						clock.increment(index);
						VectorClock maxClock = clock.compareClocks(messageB.getVectorClock(),this.getVectorClock());
					    
						this.setVectorClock(maxClock);
						//System.out.println(maxClock.toString());

						buffer.remove(i); //TODO index might get confused					
					}
				}
				buffer.add(m);
			}
		}
		else{
			System.out.println(m.toStringReceive() +", own: " + clock);
			//this.setVectorClock(m.getVectorClock());
			clock.increment(index);
			VectorClock maxClock = clock.compareClocks(m.getVectorClock(),this.getVectorClock());
			
			this.setVectorClock(maxClock);
			//System.out.println(maxClock.toString());
			
		}
		
	}
	
	public synchronized void writeFile(String message){
		try
		{
		    String filename= "myfile.txt";
		    FileWriter fw = new FileWriter(filename,true); //the true will append the new data
		    fw.write(message+ "\n");//appends the string to the file
		    fw.close();
		}
		catch(IOException ioe)
		{
		    System.err.println("IOException: " + ioe.getMessage());
		}
	}
	
	private INode getRemoteNode(String nodeStringId) throws AccessException, RemoteException, NotBoundException {
		INode remoteNode = (INode) this.registry.lookup(nodeStringId);
		return remoteNode;
	}

	public void registerNode(int length) throws RemoteException {
		nodesJoined++;
		if(nodesJoined-1 == networkSize)
			algorithm();
	}
	
	public VectorClock getVectorClock(){
		return clock;		
		
	}
	
	public void setVectorClock(VectorClock clockNew){
		clock = clockNew;		
	}
	

}
