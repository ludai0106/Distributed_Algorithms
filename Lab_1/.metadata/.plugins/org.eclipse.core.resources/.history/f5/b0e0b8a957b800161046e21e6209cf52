
public class Broadcast implements Runnable(){
	private Process currentProcess;
	private double start;
	private int broadcastRounds;
	
	
	public Broadcast(){
		
	}
	
	@Override
	public void run() {
		try{
			String[] remoteIds = currentProcess.registry.list();
			while(true & (System.currentTimeMillis() - start) < 3000){
				currentProcess.getVectorClock().increment(index);
				Clock currentClock = currentProcess.getVectorClock();
				messageNumber++;
				
				String nodePortS = Integer.toString(currentProcess.nodePort);
				String message = messageNumber + ". Hello ";
				Message m = new Message(nodePortS, message, currentClock);
				currentProcess.broadcastMessage(m);	
				for(String nodeId: remoteIds){
					
					IProcess remoteNode = currentProcess.getRemoteNode(nodeId);
					if(!nodePortS.equals(nodeId)){
						Message m2 = new Message(nodePortS, nodeId, message, currentClock);
						Thread.sleep(randomNumber(5,350));
						//Thread.sleep(100);
						remoteNode.receiveMessage(m2);
					}	
				}
				Thread.sleep(randomNumber(5,50));
			}
			
		}catch (Exception e) {
			System.out.println("Exception in broadCast " + e);
		}
	
}

}
